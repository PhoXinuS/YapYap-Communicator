name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  DOCKER_TLS_CERTDIR: ""
  SERVER_IP: "161.35.19.182"
  SERVER_USER: "root"
  DEPLOY_DIR: "/home/v5"
  REACT_APP_BACKEND_URL: "http://161.35.19.182:8080"

jobs:
  cleanup:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Docker
        uses: docker/setup-buildx-action@v1
      - name: Clean up containers
        run: |
          docker-compose down -v --remove-orphans || true
          docker system prune -af || true

  test:
    runs-on: ubuntu-latest
    needs: cleanup
    steps:
      - uses: actions/checkout@v2
      - name: Set up Docker
        uses: docker/setup-buildx-action@v1
      - name: Run tests
        run: |
          docker-compose -f docker-compose.test.yml down -v --remove-orphans || true
          docker-compose -f docker-compose.test.yml build
          docker-compose -f docker-compose.test.yml up -d
          docker-compose -f docker-compose.test.yml exec -T backend mvn test
      - name: Upload test artifacts
        uses: actions/upload-artifact@v2
        with:
          name: backend-target
          path: ./backend/target

  deploy:
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v2
      - name: Install SSH client
        run: sudo apt-get install -y openssh-client sshpass
      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan ${{ env.SERVER_IP }} >> ~/.ssh/known_hosts
      - name: Deploy to server
        env:
          SERVER_PASSWORD: ${{ secrets.SERVER_PASSWORD }}
        run: |
          VERSION=$(sshpass -p $SERVER_PASSWORD ssh ${{ env.SERVER_USER }}@${{ env.SERVER_IP }} "ls -d /home/v* 2>/dev/null | grep -o '[0-9]\+$' | sort -n | tail -1 || echo 0")
          NEXT_VERSION=$((VERSION + 1))
          NEW_DEPLOY_DIR="/home/v${NEXT_VERSION}"

          sshpass -p $SERVER_PASSWORD ssh ${{ env.SERVER_USER }}@${{ env.SERVER_IP }} "
            mkdir -p ${NEW_DEPLOY_DIR};
            echo 'Stopping all containers in old deployments...' &&
            docker ps -q | xargs -r docker stop &&
            docker ps -a -q | xargs -r docker rm &&
            echo 'Cleaning old versions except last 2...' &&
            ls -d /home/v* 2>/dev/null | sort -V | head -n -2 | xargs -r rm -rf"

          sshpass -p $SERVER_PASSWORD scp -r ./* ${{ env.SERVER_USER }}@${{ env.SERVER_IP }}:${NEW_DEPLOY_DIR}/
          sshpass -p $SERVER_PASSWORD ssh ${{ env.SERVER_USER }}@${{ env.SERVER_IP }} "
            cd ${NEW_DEPLOY_DIR} &&
            docker-compose build --build-arg REACT_APP_BACKEND_URL=${{ env.REACT_APP_BACKEND_URL }} &&
            docker-compose up -d &&
            echo 'Deployed to ${NEW_DEPLOY_DIR}' &&
            docker ps"